# This template contains steps to build, package and sign the solution.

parameters:
  arch: 'x64'
  config: 'Debug,Release'
  vmImage: 'windows-2022'
  targetOsBranch: 'official/fe_release_svc' # Use WS2022 build as baseline for tools
  onebranch: false
  nativeCompiler: false
  publish: true

jobs:
- job: build_${{ parameters.arch }}
  displayName: ${{ parameters.arch }}
  ${{ if eq(parameters.onebranch, false) }}:
    pool:
      vmImage: ${{ parameters.vmImage }}
  ${{ if eq(parameters.onebranch, true) }}:
    pool:
      type: windows
  variables:
    runCodesignValidationInjection: false # We don't sign things currently
    # Build variables
    ob_outputDirectory: $(Build.ArtifactStagingDirectory)/bin
    # https://aka.ms/obpipelines/sdl
    ob_sdl_tsa_enabled: false # When TSA is disabled all SDL tools will forced into 'break' build mode.
    ob_sdl_binskim_break: true
    ob_sdl_policheck_break: true
    ob_sdl_codeSignValidation_excludes: -|**\*.sys # Disable signing requirements for KM builds
    # https://eng.ms/docs/cloud-ai-platform/azure-edge-platform-aep/aep-engineering-systems/productivity-and-experiences/onebranch-windows-undocked/onebranch-windows-undocked/template/thingstoupdateinstartertemplate#1-windows-undocked-native-compiler-task
    ob_NativeCompiler_enabled: ${{ parameters.nativeCompiler }}
    ob_NativeCompiler_TaskVerbosity: 'Detailed'
    ob_NativeCompiler_UseOSBranchVersion: true
    ob_NativeCompiler_TargetOsBranch: ${{ parameters.targetOsBranch }}
    ob_NativeCompiler_UcrtPlatform: 'amd64'
  steps:
  - task: PowerShell@2
    displayName: Prepare Machine
    inputs:
      filePath: tools/prepare-machine.ps1
      arguments: -ForBuild -Verbose

  - ${{ if eq(parameters.onebranch, true) }}:
    - task: PowerShell@2
      displayName: Install Chocolatey
      inputs:
        targetType: inline
        script: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          choco -?

  - task: PowerShell@2
    displayName: Install LLVM 11.0
    inputs:
      targetType: inline
      script: |
        choco install -y llvm --version 11.0.1 --allow-downgrade
        Write-Host ##vso[task.prependpath]C:\Program Files\LLVM\bin

  - ${{ if eq(parameters.onebranch, true) }}:
    - task: PowerShell@2
      displayName: Install WiX Toolset
      inputs:
        targetType: inline
        script: choco install -y wixtoolset

  # Use the latest NuGet version so we can reference local NuGet packages.
  - task: NuGetToolInstaller@1
    displayName: 'Use NuGet 6.4.0'
    inputs:
      versionSpec: 6.4.0

  # Attempt to work around unreliable NuGet restore by refreshing the credential provider.
  - task: NuGetAuthenticate@1
    inputs:
      forceReinstallCredentialProvider: true

  - task: NuGetCommand@2
    displayName: Nuget Restore
    inputs:
      restoreSolution: xdp.sln
      feedsToUse: config
      nugetConfigPath: ./src/nuget.config

  - task: NuGetCommand@2
    displayName: Nuget Restore (Installer)
    inputs:
      restoreSolution: src\xdpinstaller\xdpinstaller.sln
      feedsToUse: config
      nugetConfigPath: ./src/nuget.config

  - task: PowerShell@2
    displayName: Prepare for compiling eBPF programs
    inputs:
      targetType: inline
      script: tools/prepare-machine.ps1 -ForEbpfBuild -Verbose

  - task: VSBuild@1
    displayName: Build Solution (Debug)
    condition: and(succeeded(), contains('${{ parameters.config }}', 'Debug'))
    inputs:
      solution: xdp.sln
      platform: ${{ parameters.arch }}
      configuration: debug
      msbuildArgs: -m

  - task: VSBuild@1
    displayName: Build Solution (Release)
    condition: and(succeeded(), contains('${{ parameters.config }}', 'Release'))
    inputs:
      solution: xdp.sln
      platform: ${{ parameters.arch }}
      configuration: release
      msbuildArgs: -m

  - ${{ if eq(parameters.onebranch, true) }}:
    # https://eng.ms/docs/cloud-ai-platform/azure-edge-platform-aep/aep-engineering-systems/productivity-and-experiences/onebranch-platform-services/onebranch/signing
    - task: onebranch.pipeline.signing@1
      displayName: Sign Usermode Binaries
      inputs:
        command: 'sign'
        signing_profile: 'external_distribution'
        files_to_sign: '**/*.exe;**/*.dll' # Only supports usermode binaries
        search_root: 'artifacts/bin'

  - task: PowerShell@2
    displayName: Sign and Package Kernel (Debug)
    condition: and(succeeded(), contains('${{ parameters.config }}', 'Debug'))
    inputs:
      filePath: tools/sign.ps1
      arguments: -Config Debug -Arch ${{ parameters.arch }}

  - task: PowerShell@2
    displayName: Sign and Package Kernel (Release)
    condition: and(succeeded(), contains('${{ parameters.config }}', 'Release'))
    inputs:
      filePath: tools/sign.ps1
      arguments: -Config Release -Arch ${{ parameters.arch }}

  - task: VSBuild@1
    displayName: Build Installer (Debug)
    condition: and(succeeded(), contains('${{ parameters.config }}', 'Debug'))
    inputs:
      solution: src\xdpinstaller\xdpinstaller.sln
      platform: ${{ parameters.arch }}
      configuration: debug
      msbuildArgs: -m

  - task: VSBuild@1
    displayName: Build Installer (Release)
    condition: and(succeeded(), contains('${{ parameters.config }}', 'Release'))
    inputs:
      solution: src\xdpinstaller\xdpinstaller.sln
      platform: ${{ parameters.arch }}
      configuration: release
      msbuildArgs: -m

  - ${{ if eq(parameters.onebranch, true) }}:
    # https://eng.ms/docs/cloud-ai-platform/azure-edge-platform-aep/aep-engineering-systems/productivity-and-experiences/onebranch-platform-services/onebranch/signing
    - task: onebranch.pipeline.signing@1
      displayName: Sign Installer
      inputs:
        command: 'sign'
        signing_profile: 'external_distribution'
        files_to_sign: '**/*.msi' # Only supports usermode binaries
        search_root: 'artifacts/bin'

  - ${{ if eq(parameters.publish, true) }}:
    - task: CopyFiles@2
      displayName: Filter Artifacts
      inputs:
        sourceFolder: artifacts/bin
        contents: '**/!(*.ilk|*.exp|*.lastcodeanalysissucceeded|*.tlog|*.lastbuildstate)'
        targetFolder: $(Build.ArtifactStagingDirectory)/bin

    - ${{ if eq(parameters.onebranch, false) }}:
      - task: PublishBuildArtifacts@1
        displayName: Upload Artifacts
        inputs:
          artifactName: artifacts
          pathToPublish: $(Build.ArtifactStagingDirectory)
          parallel: true

    - task: PublishSymbols@2
      inputs:
          sourceFolder: $(Build.ArtifactStagingDirectory)/bin
          searchPattern: '**/*.pdb'
          symbolServerType: teamServices
          indexSources: false
