# This template contains steps to build, package and sign the solution.

parameters:
  arch: 'x64'
  config: 'Debug,Release'
  onebranch: false
  onebranchArtifactPrefix: 'drop_build_official_main_build_project'

jobs:
- job: build_${{ parameters.arch }}${{ parameters.config }}
  displayName: ${{ parameters.arch }}${{ parameters.config }}
  variables:
    ${{ if eq(parameters['arch'], 'x64') }}:
      onebranchArch: amd64
    ${{ if eq(parameters['config'], 'Debug') }}:
      onebranchConfig: chk
    ${{ if eq(parameters['config'], 'Release') }}:
      onebranchConfig: fre
  pool:
    vmImage: windows-2022
  steps:
  - task: DownloadPipelineArtifact@2
    inputs:
      source: specific
      project: $(resources.pipeline.onebranch.projectID)
      pipeline: $(resources.pipeline.onebranch.pipelineID)
      preferTriggeringPipeline: true
      runVersion: specific
      runId: $(resources.pipeline.onebranch.runID)
      artifact: ${{ parameters.onebranchArtifactPrefix }}_$(onebranchArch)$(onebranchConfig)
      path: $(Build.ArtifactStagingDirectory)/bin/${{ parameters.platform }}${{ parameters.config }}

  - task: PublishBuildArtifacts@1
    displayName: Upload OneBranch Artifacts
    inputs:
      artifactName: artifacts
      pathToPublish: $(Build.ArtifactStagingDirectory)/bin
      targetPath: bin
      parallel: true

  - task: PowerShell@2
    displayName: Prepare Machine
    inputs:
      filePath: tools/prepare-machine.ps1
      arguments: -ForBuild -Verbose

  - task: PowerShell@2
    displayName: Install LLVM 11.0
    inputs:
      targetType: inline
      script: |
        choco install -y llvm --version 11.0.1 --allow-downgrade
        Write-Host ##vso[task.prependpath]C:\Program Files\LLVM\bin

  # Use the latest NuGet version so we can reference local NuGet packages.
  - task: NuGetToolInstaller@1
    displayName: 'Use NuGet 6.4.0'
    inputs:
      versionSpec: 6.4.0

  # Attempt to work around unreliable NuGet restore by refreshing the credential provider.
  - task: NuGetAuthenticate@1
    inputs:
      forceReinstallCredentialProvider: true

  - task: NuGetCommand@2
    displayName: Nuget Restore
    inputs:
      restoreSolution: xdp.sln
      feedsToUse: config
      nugetConfigPath: ./src/nuget.config

  - task: PowerShell@2
    displayName: Prepare for compiling eBPF programs
    inputs:
      targetType: inline
      script: tools/prepare-machine.ps1 -ForEbpfBuild -Verbose

  - task: VSBuild@1
    displayName: Build Solution (Debug)
    condition: and(succeeded(), contains('${{ parameters.config }}', 'Debug'))
    inputs:
      solution: xdp.sln
      platform: ${{ parameters.arch }}
      configuration: debug
      msbuildArgs: -m /p:SignMode=TestSign /p:IsAdmin=true

  - task: VSBuild@1
    displayName: Build Solution (Release)
    condition: and(succeeded(), contains('${{ parameters.config }}', 'Release'))
    inputs:
      solution: xdp.sln
      platform: ${{ parameters.arch }}
      configuration: release
      msbuildArgs: -m /p:SignMode=TestSign /p:IsAdmin=true

  - task: CopyFiles@2
    displayName: Filter Artifacts
    inputs:
      sourceFolder: artifacts/bin/test
      contents: '**/!(*.ilk|*.exp|*.lastcodeanalysissucceeded|*.tlog|*.lastbuildstate)'
      targetFolder: $(Build.ArtifactStagingDirectory)/bin/test

  - task: PublishBuildArtifacts@1
    displayName: Upload Test Artifacts
    inputs:
      artifactName: artifacts
      pathToPublish: $(Build.ArtifactStagingDirectory)/bin/test
      targetPath: bin/test
      parallel: true

  - task: PublishSymbols@2
    inputs:
        sourceFolder: $(Build.ArtifactStagingDirectory)/bin/test
        searchPattern: '**/*.pdb'
        symbolServerType: teamServices
        indexSources: false
